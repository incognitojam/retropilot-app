generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expiresAt    DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  emailVerifiedAt DateTime?
  banned          Boolean   @default(false)
  admin           Boolean   @default(false)
  createdAt       DateTime  @default(now())

  accounts Account[]
  sessions Session[]
  devices  Device[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expiresAt  DateTime

  @@unique([identifier, token])
}

model Device {
  dongleId        String   @unique @db.VarChar(36)
  pairedUserId    String?
  nickname        String?  @db.VarChar(20)
  imei            String?
  serial          String?
  deviceType      String?
  publicKey       String?
  storageUsage    Int      @default(0)
  maxStorageUsage Int?
  ignoringUploads Boolean?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lastPingAt DateTime @default(now())

  user          User?          @relation(fields: [pairedUserId], references: [id], onDelete: SetNull)
  driveSegments DriveSegment[]
  drives        Drive[]
}

model DriveSegment {
  id              String @id @default(cuid())
  segmentNum      Int
  driveIdentifier String @db.VarChar(20)
  dongleId        String @db.VarChar(36)

  // Processed drive segment data
  durationSeconds Float?
  distanceMeters  Int?
  filesizeBytes   Int?
  timestamp       DateTime?

  createdAt           DateTime  @default(now())
  lastUploadAt        DateTime?
  processAttemptCount Int       @default(0) @db.SmallInt
  processedAt         DateTime?

  drive  Drive   @relation(fields: [driveIdentifier, dongleId], references: [identifier, dongleId], onDelete: Cascade)
  device Device? @relation(fields: [dongleId], references: [dongleId], onDelete: Restrict)

  @@unique([dongleId, driveIdentifier, segmentNum])
}

model Drive {
  dongleId   String @db.VarChar(36)
  identifier String @db.VarChar(20)

  // Processed drive data
  segmentCount    Int?
  durationSeconds Float?
  distanceMeters  Float?
  filesizeBytes   Int?
  metadata        String?
  timestamp       DateTime?

  createdAt         DateTime  @default(now())
  lastUploadAt      DateTime?
  uploadCompletedAt DateTime?
  processedAt       DateTime?
  preservedAt       DateTime?
  archivedAt        DateTime?
  deletedAt         DateTime?

  device   Device?        @relation(fields: [dongleId], references: [dongleId], onDelete: Restrict)
  segments DriveSegment[]

  @@id([dongleId, identifier])
}
